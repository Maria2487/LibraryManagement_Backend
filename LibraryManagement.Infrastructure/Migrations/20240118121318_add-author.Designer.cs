// <auto-generated />
using System;
using LibraryManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240118121318_add-author")]
    partial class addauthor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LibraryManagement.Domain.Entities.EnumEntities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genere");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Children"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Classics"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Comics"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Contemporary"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Cookbooks"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 12,
                            Name = "GraphicNovel"
                        },
                        new
                        {
                            Id = 13,
                            Name = "HistoricalFiction"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 17,
                            Name = "NonFiction"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Paranormal"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 21,
                            Name = "ScienceFiction"
                        },
                        new
                        {
                            Id = 22,
                            Name = "SelfHelp"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Young adult"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Art"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Bussines"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Manga"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.EnumEntities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Penguin Random House"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HarperCollins Publishers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hachette Book Group"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.JoiningEntities.BookAuthor", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.JoiningEntities.BookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenere");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.JoiningEntities.Bookings", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "MembershipId");

                    b.HasIndex("MembershipId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f5da9ca-9401-41b5-ad1c-d87c6cbc5287"),
                            Biography = "Mihai Eminescu a fost un poet, prozator și jurnalist român, considerat, în general, ca fiind cea mai cunoscută și influentă personalitate din literatura română.",
                            DateOfBirth = new DateTime(1850, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeath = new DateTime(1889, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mihai",
                            IsDeleted = false,
                            LastName = "Eminescu",
                            Nationality = "Romanian",
                            Photo = ""
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edition")
                        .HasMaxLength(256)
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("MembershipId");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MembershipTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.HasIndex("MembershipTypeId");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.MembershipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Badge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLoansAllowed")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLoansNeeded")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("MembershipTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Badge = "",
                            Name = "Youngling",
                            NumberOfLoansAllowed = 2,
                            NumberOfLoansNeeded = 0,
                            Price = 10.0
                        },
                        new
                        {
                            Id = 2,
                            Badge = "",
                            Name = "Initiate",
                            NumberOfLoansAllowed = 4,
                            NumberOfLoansNeeded = 10,
                            Price = 20.0
                        },
                        new
                        {
                            Id = 3,
                            Badge = "",
                            Name = "Padawan",
                            NumberOfLoansAllowed = 6,
                            NumberOfLoansNeeded = 15,
                            Price = 30.0
                        },
                        new
                        {
                            Id = 4,
                            Badge = "",
                            Name = "Master",
                            NumberOfLoansAllowed = 8,
                            NumberOfLoansNeeded = 20,
                            Price = 40.0
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MemberPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1aff78cb-91ad-4346-9b49-9752f8a7a220"),
                            Address = "Universitatii 13, Suceava, Romania",
                            CreatedAt = new DateTime(2024, 1, 18, 12, 13, 17, 963, DateTimeKind.Utc).AddTicks(6045),
                            DateOfBirth = new DateTime(2000, 1, 24, 22, 0, 0, 0, DateTimeKind.Utc),
                            Email = "librarymanager0125@gmail.com",
                            FirstName = "Library",
                            Gender = 0,
                            IsDeleted = false,
                            LastName = "Administrator",
                            Password = "$2a$11$y3qWX7HxTowsZ4hsacAjGeEDj1TTTHbI4A3RWJDVRonaMCzxORXjy",
                            Phone = "+40740535564",
                            Role = 0,
                            UpdatedAt = new DateTime(2024, 1, 18, 12, 13, 17, 963, DateTimeKind.Utc).AddTicks(6045)
                        },
                        new
                        {
                            Id = new Guid("6976fe0d-f926-4c30-a38c-8f440a1e11ce"),
                            Address = "Suceava, Suceava",
                            CreatedAt = new DateTime(2024, 1, 18, 12, 13, 17, 963, DateTimeKind.Utc).AddTicks(6254),
                            DateOfBirth = new DateTime(2000, 1, 24, 22, 0, 0, 0, DateTimeKind.Utc),
                            Email = "maria.cotofrec1@student.usv.ro",
                            FirstName = "Maria",
                            Gender = 0,
                            IsDeleted = false,
                            LastName = "Elena",
                            Password = "$2a$11$y3qWX7HxTowsZ4hsacAjGeEDj1TTTHbI4A3RWJDVRonaMCzxORXjy",
                            Phone = "+40740535564",
                            Role = 1,
                            UpdatedAt = new DateTime(2024, 1, 18, 12, 13, 17, 963, DateTimeKind.Utc).AddTicks(6255)
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.JoiningEntities.BookAuthor", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.RegularEntities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryManagement.Domain.Entities.RegularEntities.Book", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.JoiningEntities.BookGenre", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.RegularEntities.Book", "Book")
                        .WithMany("Genres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryManagement.Domain.Entities.EnumEntities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.JoiningEntities.Bookings", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.RegularEntities.Book", "Book")
                        .WithMany("Bookings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Domain.Entities.RegularEntities.Membership", "Membership")
                        .WithMany("Bookings")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.Book", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.EnumEntities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.Loan", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.RegularEntities.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryManagement.Domain.Entities.RegularEntities.Membership", "Membership")
                        .WithMany("Loans")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Book");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.Membership", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.RegularEntities.User", "Member")
                        .WithOne("Membership")
                        .HasForeignKey("LibraryManagement.Domain.Entities.RegularEntities.Membership", "MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Domain.Entities.RegularEntities.MembershipType", "MembershipType")
                        .WithMany("Membership")
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("MembershipType");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.EnumEntities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.EnumEntities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.Book", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Bookings");

                    b.Navigation("Genres");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.Membership", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.MembershipType", b =>
                {
                    b.Navigation("Membership");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.RegularEntities.User", b =>
                {
                    b.Navigation("Membership");
                });
#pragma warning restore 612, 618
        }
    }
}
